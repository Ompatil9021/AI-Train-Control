{"ast":null,"code":"var _jsxFileName = \"D:\\\\ai-train-control\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport TrainMap from './TrainMap'; // Import the map you created\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [simulationState, setSimulationState] = useState({\n    trains: [],\n    simulation_time: \"00:00:00\"\n  });\n\n  // This is the core function that connects to your backend\n  useEffect(() => {\n    // Set an interval to fetch data every 2 seconds\n    const intervalId = setInterval(() => {\n      fetch('http://127.0.0.1:5001/api/get_simulation_state').then(response => response.json()).then(data => {\n        setSimulationState(data);\n      }).catch(error => console.error(\"Error fetching simulation state:\", error));\n    }, 2000); // 2000 milliseconds = 2 seconds\n\n    // Cleanup function to clear the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, []); // The empty array [] means this effect runs only once when the component mounts\n\n  // --- Helper function to position trains on the map ---\n  // This function converts a train's kilometer position into a pixel coordinate for the SVG map.\n  const getTrainPosition = positionKm => {\n    // These values are based on the SVG map's coordinates and our assumed route length\n    const MAP_START_X = 210; // The 'x' coordinate of Mumbai CST station in the SVG\n    const MAP_END_X = 1310; // The 'x' coordinate of Pune station in the SVG\n    const ROUTE_LENGTH_KM = 192; // Approximate distance from Mumbai CST to Pune\n\n    const mapWidth = MAP_END_X - MAP_START_X;\n\n    // Calculate the percentage of the route the train has traveled\n    const percentage = positionKm / ROUTE_LENGTH_KM;\n\n    // Calculate the pixel position on the map\n    const xPos = MAP_START_X + percentage * mapWidth;\n    const yPos = 151; // The 'y' coordinate of the main track in the SVG\n\n    return {\n      left: xPos,\n      top: yPos\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"AI Train Traffic Control\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Simulation Time: \", simulationState.simulation_time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(TrainMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), simulationState.trains.map(train => {\n        const position = getTrainPosition(train.position_km);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"train-icon\",\n          style: {\n            left: `${position.left}px`,\n            top: `${position.top}px`\n          },\n          title: `${train.name} (${train.id}) - ${train.speed_kmh} km/h`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"train-label\",\n            children: train.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)\n        }, train.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"R0m4WfnNbrKEb4PxyeHhNqDBmWc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","TrainMap","jsxDEV","_jsxDEV","App","_s","simulationState","setSimulationState","trains","simulation_time","intervalId","setInterval","fetch","then","response","json","data","catch","error","console","clearInterval","getTrainPosition","positionKm","MAP_START_X","MAP_END_X","ROUTE_LENGTH_KM","mapWidth","percentage","xPos","yPos","left","top","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","train","position","position_km","style","title","name","id","speed_kmh","_c","$RefreshReg$"],"sources":["D:/ai-train-control/frontend/src/App.js"],"sourcesContent":["// frontend/src/App.js\n\nimport React, { useState, useEffect } from 'react';\nimport TrainMap from './TrainMap'; // Import the map you created\nimport './App.css';\n\nfunction App() {\n  const [simulationState, setSimulationState] = useState({ trains: [], simulation_time: \"00:00:00\" });\n\n  // This is the core function that connects to your backend\n  useEffect(() => {\n    // Set an interval to fetch data every 2 seconds\n    const intervalId = setInterval(() => {\n      fetch('http://127.0.0.1:5001/api/get_simulation_state')\n        .then(response => response.json())\n        .then(data => {\n          setSimulationState(data);\n        })\n        .catch(error => console.error(\"Error fetching simulation state:\", error));\n    }, 2000); // 2000 milliseconds = 2 seconds\n\n    // Cleanup function to clear the interval when the component unmounts\n    return () => clearInterval(intervalId);\n  }, []); // The empty array [] means this effect runs only once when the component mounts\n\n  // --- Helper function to position trains on the map ---\n  // This function converts a train's kilometer position into a pixel coordinate for the SVG map.\n  const getTrainPosition = (positionKm) => {\n    // These values are based on the SVG map's coordinates and our assumed route length\n    const MAP_START_X = 210; // The 'x' coordinate of Mumbai CST station in the SVG\n    const MAP_END_X = 1310;   // The 'x' coordinate of Pune station in the SVG\n    const ROUTE_LENGTH_KM = 192; // Approximate distance from Mumbai CST to Pune\n\n    const mapWidth = MAP_END_X - MAP_START_X;\n    \n    // Calculate the percentage of the route the train has traveled\n    const percentage = positionKm / ROUTE_LENGTH_KM;\n\n    // Calculate the pixel position on the map\n    const xPos = MAP_START_X + (percentage * mapWidth);\n    const yPos = 151; // The 'y' coordinate of the main track in the SVG\n\n    return { left: xPos, top: yPos };\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>AI Train Traffic Control</h1>\n      <h2>Simulation Time: {simulationState.simulation_time}</h2>\n      <div className=\"dashboard\">\n        <TrainMap />\n        {/* This part maps over the train data and renders an icon for each train */}\n        {simulationState.trains.map(train => {\n          const position = getTrainPosition(train.position_km);\n          return (\n            <div \n              key={train.id} \n              className=\"train-icon\" \n              style={{ left: `${position.left}px`, top: `${position.top}px` }}\n              title={`${train.name} (${train.id}) - ${train.speed_kmh} km/h`}\n            >\n              <div className=\"train-label\">{train.id}</div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}